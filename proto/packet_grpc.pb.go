// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/packet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TunnelClient_Connect_FullMethodName = "/proto.TunnelClient/Connect"
)

// TunnelClientClient is the client API for TunnelClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelClientClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ClientMessage], error)
}

type tunnelClientClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelClientClient(cc grpc.ClientConnInterface) TunnelClientClient {
	return &tunnelClientClient{cc}
}

func (c *tunnelClientClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientMessage, ClientMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelClient_ServiceDesc.Streams[0], TunnelClient_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientMessage, ClientMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelClient_ConnectClient = grpc.BidiStreamingClient[ClientMessage, ClientMessage]

// TunnelClientServer is the server API for TunnelClient service.
// All implementations must embed UnimplementedTunnelClientServer
// for forward compatibility.
type TunnelClientServer interface {
	Connect(grpc.BidiStreamingServer[ClientMessage, ClientMessage]) error
	mustEmbedUnimplementedTunnelClientServer()
}

// UnimplementedTunnelClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelClientServer struct{}

func (UnimplementedTunnelClientServer) Connect(grpc.BidiStreamingServer[ClientMessage, ClientMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedTunnelClientServer) mustEmbedUnimplementedTunnelClientServer() {}
func (UnimplementedTunnelClientServer) testEmbeddedByValue()                      {}

// UnsafeTunnelClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelClientServer will
// result in compilation errors.
type UnsafeTunnelClientServer interface {
	mustEmbedUnimplementedTunnelClientServer()
}

func RegisterTunnelClientServer(s grpc.ServiceRegistrar, srv TunnelClientServer) {
	// If the following call pancis, it indicates UnimplementedTunnelClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelClient_ServiceDesc, srv)
}

func _TunnelClient_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelClientServer).Connect(&grpc.GenericServerStream[ClientMessage, ClientMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelClient_ConnectServer = grpc.BidiStreamingServer[ClientMessage, ClientMessage]

// TunnelClient_ServiceDesc is the grpc.ServiceDesc for TunnelClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TunnelClient",
	HandlerType: (*TunnelClientServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _TunnelClient_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/packet.proto",
}

const (
	TunnelProxy_Connect_FullMethodName = "/proto.TunnelProxy/Connect"
)

// TunnelProxyClient is the client API for TunnelProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelProxyClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxyMessage, ProxyMessage], error)
}

type tunnelProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelProxyClient(cc grpc.ClientConnInterface) TunnelProxyClient {
	return &tunnelProxyClient{cc}
}

func (c *tunnelProxyClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ProxyMessage, ProxyMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelProxy_ServiceDesc.Streams[0], TunnelProxy_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProxyMessage, ProxyMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelProxy_ConnectClient = grpc.BidiStreamingClient[ProxyMessage, ProxyMessage]

// TunnelProxyServer is the server API for TunnelProxy service.
// All implementations must embed UnimplementedTunnelProxyServer
// for forward compatibility.
type TunnelProxyServer interface {
	Connect(grpc.BidiStreamingServer[ProxyMessage, ProxyMessage]) error
	mustEmbedUnimplementedTunnelProxyServer()
}

// UnimplementedTunnelProxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelProxyServer struct{}

func (UnimplementedTunnelProxyServer) Connect(grpc.BidiStreamingServer[ProxyMessage, ProxyMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedTunnelProxyServer) mustEmbedUnimplementedTunnelProxyServer() {}
func (UnimplementedTunnelProxyServer) testEmbeddedByValue()                     {}

// UnsafeTunnelProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelProxyServer will
// result in compilation errors.
type UnsafeTunnelProxyServer interface {
	mustEmbedUnimplementedTunnelProxyServer()
}

func RegisterTunnelProxyServer(s grpc.ServiceRegistrar, srv TunnelProxyServer) {
	// If the following call pancis, it indicates UnimplementedTunnelProxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelProxy_ServiceDesc, srv)
}

func _TunnelProxy_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelProxyServer).Connect(&grpc.GenericServerStream[ProxyMessage, ProxyMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelProxy_ConnectServer = grpc.BidiStreamingServer[ProxyMessage, ProxyMessage]

// TunnelProxy_ServiceDesc is the grpc.ServiceDesc for TunnelProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TunnelProxy",
	HandlerType: (*TunnelProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _TunnelProxy_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/packet.proto",
}

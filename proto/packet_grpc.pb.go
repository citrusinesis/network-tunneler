// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/packet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TunnelAgent_Connect_FullMethodName = "/proto.TunnelAgent/Connect"
)

// TunnelAgentClient is the client API for TunnelAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelAgentClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentMessage, AgentMessage], error)
}

type tunnelAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelAgentClient(cc grpc.ClientConnInterface) TunnelAgentClient {
	return &tunnelAgentClient{cc}
}

func (c *tunnelAgentClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AgentMessage, AgentMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelAgent_ServiceDesc.Streams[0], TunnelAgent_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentMessage, AgentMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelAgent_ConnectClient = grpc.BidiStreamingClient[AgentMessage, AgentMessage]

// TunnelAgentServer is the server API for TunnelAgent service.
// All implementations must embed UnimplementedTunnelAgentServer
// for forward compatibility.
type TunnelAgentServer interface {
	Connect(grpc.BidiStreamingServer[AgentMessage, AgentMessage]) error
	mustEmbedUnimplementedTunnelAgentServer()
}

// UnimplementedTunnelAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelAgentServer struct{}

func (UnimplementedTunnelAgentServer) Connect(grpc.BidiStreamingServer[AgentMessage, AgentMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedTunnelAgentServer) mustEmbedUnimplementedTunnelAgentServer() {}
func (UnimplementedTunnelAgentServer) testEmbeddedByValue()                     {}

// UnsafeTunnelAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelAgentServer will
// result in compilation errors.
type UnsafeTunnelAgentServer interface {
	mustEmbedUnimplementedTunnelAgentServer()
}

func RegisterTunnelAgentServer(s grpc.ServiceRegistrar, srv TunnelAgentServer) {
	// If the following call pancis, it indicates UnimplementedTunnelAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelAgent_ServiceDesc, srv)
}

func _TunnelAgent_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelAgentServer).Connect(&grpc.GenericServerStream[AgentMessage, AgentMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelAgent_ConnectServer = grpc.BidiStreamingServer[AgentMessage, AgentMessage]

// TunnelAgent_ServiceDesc is the grpc.ServiceDesc for TunnelAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TunnelAgent",
	HandlerType: (*TunnelAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _TunnelAgent_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/packet.proto",
}

const (
	TunnelImplant_Connect_FullMethodName = "/proto.TunnelImplant/Connect"
)

// TunnelImplantClient is the client API for TunnelImplant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelImplantClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ImplantMessage, ImplantMessage], error)
}

type tunnelImplantClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelImplantClient(cc grpc.ClientConnInterface) TunnelImplantClient {
	return &tunnelImplantClient{cc}
}

func (c *tunnelImplantClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ImplantMessage, ImplantMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TunnelImplant_ServiceDesc.Streams[0], TunnelImplant_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ImplantMessage, ImplantMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelImplant_ConnectClient = grpc.BidiStreamingClient[ImplantMessage, ImplantMessage]

// TunnelImplantServer is the server API for TunnelImplant service.
// All implementations must embed UnimplementedTunnelImplantServer
// for forward compatibility.
type TunnelImplantServer interface {
	Connect(grpc.BidiStreamingServer[ImplantMessage, ImplantMessage]) error
	mustEmbedUnimplementedTunnelImplantServer()
}

// UnimplementedTunnelImplantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTunnelImplantServer struct{}

func (UnimplementedTunnelImplantServer) Connect(grpc.BidiStreamingServer[ImplantMessage, ImplantMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedTunnelImplantServer) mustEmbedUnimplementedTunnelImplantServer() {}
func (UnimplementedTunnelImplantServer) testEmbeddedByValue()                       {}

// UnsafeTunnelImplantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelImplantServer will
// result in compilation errors.
type UnsafeTunnelImplantServer interface {
	mustEmbedUnimplementedTunnelImplantServer()
}

func RegisterTunnelImplantServer(s grpc.ServiceRegistrar, srv TunnelImplantServer) {
	// If the following call pancis, it indicates UnimplementedTunnelImplantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TunnelImplant_ServiceDesc, srv)
}

func _TunnelImplant_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelImplantServer).Connect(&grpc.GenericServerStream[ImplantMessage, ImplantMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TunnelImplant_ConnectServer = grpc.BidiStreamingServer[ImplantMessage, ImplantMessage]

// TunnelImplant_ServiceDesc is the grpc.ServiceDesc for TunnelImplant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelImplant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TunnelImplant",
	HandlerType: (*TunnelImplantServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _TunnelImplant_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/packet.proto",
}
